export type NameDecoded = { value: string; oid: string }[];

export type ToolboxCertificateInfoDTO = {
  notAfter: string;
  notBefore: string;
  subjectKeyId: string;
  subjectNameDecoded: NameDecoded;
  issuerNameDecoded: NameDecoded;
  thumbprint?: string;
  algorithm?: string;
};

export type ToolboxCryptoProvidersDTO = {
  providerCode: number;
  providerName: string;
  versionMajor: number;
  versionMinor: number;
};

export type GetDataSignatureInputDTO = {
  Base64Data: string; // –î–∞–Ω–Ω—ã–π –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
  SubjectKeyId: string; // –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
};

export type InstallCertInputDTO = {
  providerCode: number;
  providerName: string;
  containerName: string;
  CertData: string;
};

export type InstallTokenCertInputDTO = {
  TokenType: string;
  Pin: string;
  ContainerName: string;
  CertData: string;
};

export type CreateCertificateRequestInputDTO = {
  providerCode: number;
  providerName: string;
  signTool: string;
  certAttributes: NameDecoded;
  enhKeyUsage: string[];
  certPolicies: NameDecoded;
  certAltarnativeNames: [] | null; // –í –≠–¢ –º—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ, —Ö–∑ —á—Ç–æ –≤ –Ω–µ–º –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å
  keyUsage: string;
  notBefore: string;
  notAfter: string;
  containerName: string;
  requestName: string;
  exportableKey: boolean; // —ç–∫—Å–ø–æ—Ä—Ç –∫–ª—é—á–∞
};

export type CreateTokenCertificateRequestInputDTO = {
  Pin: string;
  TokenType: string;
  computeSKID: boolean; // –≤ –¥–æ–∫–µ toolbox –µ–≥–æ –Ω–µ—Ç, –Ω–æ –≤ –≠–¢ –æ–Ω –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è ü§∑‚Äç
  RequestData: string; // –í—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–µ –≤ json
};

export type CreateCertificateRequestDTO = {
  subjectKeyID: string; // skid —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
  value: string; // —Å—Ç—Ä–æ–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –¥–ª—è —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –≤ base64
};
